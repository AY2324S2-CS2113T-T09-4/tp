@startuml

skinparam sequenceReferenceBackgroundColor lightblue
participant "handler:Handler" as Handler
participant "parser:Parser" as Parser
participant "validation:Validation" as Validation
participant "newPeriod:Period" as Period
participant "healthList:HealthList" as HealthList
participant HealthList as HealthList1 << Class >>

Handler -> Parser: parsePeriodInput()
activate Handler #salmon
activate Parser #salmon

Parser -> Parser: splitPeriodInput()
activate Parser #FFBBBB
Parser --> Parser: periodDetails[]
deactivate Parser #FFBBBB

Parser -> Validation: validatePeriodInput()
activate Validation #FFBBBB
Validation --> Parser:
deactivate Validation

alt endFlag is present
    alt list is empty || end date present in latest period
    Parser -> Period **: new
    activate Period #FFBBBB
    Period -> HealthList: addPeriod(startDate, endDate)
    activate HealthList #FFBBBB
ref over HealthList: setCycleLength()
    HealthList --> Period:
    deactivate HealthList #FFBBBB


    else end date not present in latest period
    Parser -> HealthList1: getPeriod(latestPeriodIndex)
    activate HealthList1 #FFBBBB

    HealthList1 --> Parser:
    deactivate HealthList1 #FFBBBB
    Parser -> "period:Period": updateEndDate(endDate)
    activate "period:Period" #FFBBBB
    "period:Period" --> Parser:
    deactivate HealthList1 #FFBBBB
    deactivate "period:Period" #FFBBBB
    destroy "period:Period"
    end

else endFlag is not present

    activate Period #FFBBBB
    Period -> HealthList: addPeriod(startDate)
ref over HealthList: setCycleLength()
    activate HealthList #FFBBBB
    HealthList --> Period:
    deactivate HealthList #FFBBBB
    deactivate Period #FFBBBB
    destroy HealthList

end
Parser -> "output:Output": printAddPeriod()
activate "output:Output" #FFBBBB
"output:Output" --> Parser:
deactivate  "output:Output"
destroy Period

@enduml